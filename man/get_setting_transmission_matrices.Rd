% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_setting_transmission_matrices.R
\name{get_setting_transmission_matrices}
\alias{get_setting_transmission_matrices}
\title{Get Setting Transmission Matrices}
\usage{
get_setting_transmission_matrices(age_breaks = c(seq(0, 80, by = 5), Inf))
}
\arguments{
\item{age_breaks}{vector of age breaks, defaults to \code{c(seq(0, 80, by = 5), Inf)}}
}
\value{
list of matrices, containing the transmission probabilities for each setting
}
\description{
Given some age breaks, return a named list of matrices containing relative
transmission probability matrices for each of 4 settings: home, school,
work, other. These can be combined with contact matrices to produce
setting-specific relative next generation matrices.
}
\examples{
\dontrun{
# fit polymod model
setting_models <- fit_setting_contacts(
  contact_data_list = get_polymod_setting_data(),
  population = get_polymod_population()
)

# define age breaks for prediction
age_breaks <- c(seq(0, 80, by = 5), Inf)

# define a new population age distribution to predict to
fairfield_age_pop <- abs_age_lga("Fairfield (C)")

# predict setting-specific contact matrices to a new population
contact_matrices <- predict_setting_contacts(
  population = fairfield_age_pop,
  contact_model = setting_models,
  age_breaks = age_breaks
)

# remove the 'all' matrix, keep the other four settings
contact_matrices <- contact_matrices[c("home", "school", "work", "other")]

# get setting-specific transmission probability matrices for the same age
# aggregations
transmission_matrices <- get_setting_transmission_matrices(
  age_breaks = age_breaks
)

# combine them to get setting-specific (unscaled) next-generation matrices
next_generation_matrices <- mapply(
  FUN = `*`,
  contact_matrices,
  transmission_matrices,
  SIMPLIFY = FALSE
)

# get the all-settings NGM
ngm_overall <- Reduce("+", next_generation_matrices)
}
}
